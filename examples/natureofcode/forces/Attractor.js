var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
define(["require", "exports"], function (require, exports) {
    "use strict";
    var DisplayObject = etch.drawing.DisplayObject;
    var Point = etch.primitives.Point;
    var Vector = etch.primitives.Vector;
    var Attractor = (function (_super) {
        __extends(Attractor, _super);
        function Attractor(mass, g, friction, sticky, x, y, movers) {
            _super.call(this);
            this.color = '#000';
            this.mass = mass;
            this.position = new Point(x, y);
            this.G = g;
            this.friction = friction;
            this.movers = movers;
            this.sticky = sticky;
            this.radius = Math.min(this.mass, 30);
            this.stickinessRadius = this.radius;
        }
        Attractor.prototype.init = function (drawTo, drawFrom) {
            _super.prototype.init.call(this, drawTo, drawFrom);
        };
        Attractor.prototype.applyGravity = function (m) {
            var force = Vector.sub(this.position.toVector(), m.position.toVector());
            var distance = force.mag();
            distance = Math.clamp(distance, 5.0, 25.0);
            force.normalize();
            var strength = (this.G * this.mass) / (distance * distance);
            force.mult(strength);
            m.applyForce(force);
        };
        Attractor.prototype.applyFriction = function (m) {
            var force = m.velocity.clone();
            force.mult(-1).normalize().mult(this.friction);
            m.applyForce(force);
        };
        Attractor.prototype.applyStickiness = function (m) {
            var delta = Vector.sub(this.position.toVector(), m.position.toVector());
            var distance = delta.mag();
            if (distance < this.stickinessRadius) {
                var force = m.velocity.clone();
                force.mult(-1);
                m.applyForce(force);
                m.position.x = this.position.x;
                m.position.y = this.position.y;
            }
        };
        Attractor.prototype.update = function () {
            for (var i = 0; i < this.movers.length; i++) {
                var mover = this.movers[i];
                this.applyGravity(mover);
                this.applyFriction(mover);
                this.applyStickiness(mover);
            }
        };
        Attractor.prototype.draw = function () {
            this.ctx.beginPath();
            this.ctx.arc(this.position.x, this.position.y, this.radius, 0, Math.TAU, false);
            this.ctx.fillStyle = this.color;
            this.ctx.fill();
        };
        return Attractor;
    }(DisplayObject));
    exports.Attractor = Attractor;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdHVyZW9mY29kZS9mb3JjZXMvQXR0cmFjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7SUFDQSxJQUFPLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUNsRCxJQUFPLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztJQUNyQyxJQUFPLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUd2QztRQUErQiw2QkFBYTtRQVczQyxtQkFBWSxJQUFZLEVBQUUsQ0FBUyxFQUFFLFFBQWdCLEVBQUUsTUFBZSxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsTUFBZTtZQUM1RyxpQkFBTyxDQUFDO1lBVEYsVUFBSyxHQUFXLE1BQU0sQ0FBQztZQVU3QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNYLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzNDLENBQUM7UUFFRCx3QkFBSSxHQUFKLFVBQUssTUFBdUIsRUFBRSxRQUEwQjtZQUNqRCxnQkFBSyxDQUFDLElBQUksWUFBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDakMsQ0FBQztRQUVKLGdDQUFZLEdBQVosVUFBYSxDQUFRO1lBQ2QsSUFB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QVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEIsQ0FBQztRQUVMLGdCQUFDO0lBQUQsQ0F4RUEsQUF3RUMsQ0F4RThCLGFBQWEsR0F3RTNDO0lBeEVZLGlCQUFTLFlBd0VyQixDQUFBIiwiZmlsZSI6Im5hdHVyZW9mY29kZS9mb3JjZXMvQXR0cmFjdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhbnZhcyA9IGV0Y2guZHJhd2luZy5DYW52YXM7XHJcbmltcG9ydCBEaXNwbGF5T2JqZWN0ID0gZXRjaC5kcmF3aW5nLkRpc3BsYXlPYmplY3Q7XHJcbmltcG9ydCBQb2ludCA9IGV0Y2gucHJpbWl0aXZlcy5Qb2ludDtcclxuaW1wb3J0IFZlY3RvciA9IGV0Y2gucHJpbWl0aXZlcy5WZWN0b3I7XHJcbmltcG9ydCB7TW92ZXI1IGFzIE1vdmVyfSBmcm9tICcuL01vdmVyNSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQXR0cmFjdG9yIGV4dGVuZHMgRGlzcGxheU9iamVjdCB7XHJcblxyXG5cdHB1YmxpYyBtYXNzOiBudW1iZXI7XHJcblx0cHVibGljIGNvbG9yOiBzdHJpbmcgPSAnIzAwMCc7XHJcbiAgICBwdWJsaWMgRzogbnVtYmVyO1xyXG4gICAgcHVibGljIGZyaWN0aW9uOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbW92ZXJzOiBNb3ZlcltdO1xyXG4gICAgcHVibGljIHN0aWNreTogYm9vbGVhbjtcclxuICAgIHB1YmxpYyByYWRpdXM6IG51bWJlcjtcclxuICAgIHB1YmxpYyBzdGlja2luZXNzUmFkaXVzOiBudW1iZXI7XHJcblxyXG5cdGNvbnN0cnVjdG9yKG1hc3M6IG51bWJlciwgZzogbnVtYmVyLCBmcmljdGlvbjogbnVtYmVyLCBzdGlja3k6IGJvb2xlYW4sIHg6IG51bWJlciwgeTogbnVtYmVyLCBtb3ZlcnM6IE1vdmVyW10pe1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMubWFzcyA9IG1hc3M7XHJcblx0XHR0aGlzLnBvc2l0aW9uID0gbmV3IFBvaW50KHgsIHkpO1xyXG4gICAgICAgIHRoaXMuRyA9IGc7XHJcbiAgICAgICAgdGhpcy5mcmljdGlvbiA9IGZyaWN0aW9uO1xyXG4gICAgICAgIHRoaXMubW92ZXJzID0gbW92ZXJzO1xyXG4gICAgICAgIHRoaXMuc3RpY2t5ID0gc3RpY2t5O1xyXG4gICAgICAgIHRoaXMucmFkaXVzID0gTWF0aC5taW4odGhpcy5tYXNzLCAzMCk7XHJcbiAgICAgICAgdGhpcy5zdGlja2luZXNzUmFkaXVzID0gdGhpcy5yYWRpdXM7XHJcblx0fVxyXG5cclxuXHRpbml0KGRyYXdUbzogSURpc3BsYXlDb250ZXh0LCBkcmF3RnJvbT86IElEaXNwbGF5Q29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLmluaXQoZHJhd1RvLCBkcmF3RnJvbSk7XHJcbiAgICB9XHJcblxyXG5cdGFwcGx5R3Jhdml0eShtOiBNb3Zlcik6IHZvaWQge1xyXG4gICAgICAgIHZhciBmb3JjZTogVmVjdG9yID0gVmVjdG9yLnN1Yih0aGlzLnBvc2l0aW9uLnRvVmVjdG9yKCksIG0ucG9zaXRpb24udG9WZWN0b3IoKSk7XHJcblx0XHR2YXIgZGlzdGFuY2U6IG51bWJlciA9IGZvcmNlLm1hZygpO1xyXG5cdFx0ZGlzdGFuY2UgPSBNYXRoLmNsYW1wKGRpc3RhbmNlLCA1LjAsIDI1LjApO1xyXG5cdFx0Zm9yY2Uubm9ybWFsaXplKCk7XHJcblx0XHR2YXIgc3RyZW5ndGg6IG51bWJlciA9ICh0aGlzLkcgKiB0aGlzLm1hc3MpIC8gKGRpc3RhbmNlICogZGlzdGFuY2UpO1xyXG5cdFx0Zm9yY2UubXVsdChzdHJlbmd0aCk7XHJcblx0XHRtLmFwcGx5Rm9yY2UoZm9yY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFwcGx5RnJpY3Rpb24obTogTW92ZXIpOiB2b2lkIHtcclxuICAgICAgICB2YXIgZm9yY2U6IFZlY3RvciA9IG0udmVsb2NpdHkuY2xvbmUoKTtcclxuICAgICAgICBmb3JjZS5tdWx0KC0xKS5ub3JtYWxpemUoKS5tdWx0KHRoaXMuZnJpY3Rpb24pO1xyXG4gICAgICAgIG0uYXBwbHlGb3JjZShmb3JjZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlTdGlja2luZXNzKG06IE1vdmVyKTogdm9pZCB7ICAgICAgICBcclxuICAgICAgICB2YXIgZGVsdGE6IFZlY3RvciA9IFZlY3Rvci5zdWIodGhpcy5wb3NpdGlvbi50b1ZlY3RvcigpLCBtLnBvc2l0aW9uLnRvVmVjdG9yKCkpO1xyXG4gICAgICAgIHZhciBkaXN0YW5jZTogbnVtYmVyID0gZGVsdGEubWFnKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGRpc3RhbmNlIDwgdGhpcy5zdGlja2luZXNzUmFkaXVzKXtcclxuICAgICAgICAgICAgdmFyIGZvcmNlOiBWZWN0b3IgPSBtLnZlbG9jaXR5LmNsb25lKCk7XHJcbiAgICAgICAgICAgIGZvcmNlLm11bHQoLTEpO1xyXG4gICAgICAgICAgICBtLmFwcGx5Rm9yY2UoZm9yY2UpO1xyXG4gICAgICAgICAgICBtLnBvc2l0aW9uLnggPSB0aGlzLnBvc2l0aW9uLng7XHJcbiAgICAgICAgICAgIG0ucG9zaXRpb24ueSA9IHRoaXMucG9zaXRpb24ueTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKCk6IHZvaWR7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1vdmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgbW92ZXI6IE1vdmVyID0gdGhpcy5tb3ZlcnNbaV07XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlHcmF2aXR5KG1vdmVyKTtcclxuICAgICAgICAgICAgdGhpcy5hcHBseUZyaWN0aW9uKG1vdmVyKTtcclxuICAgICAgICAgICAgdGhpcy5hcHBseVN0aWNraW5lc3MobW92ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkcmF3KCk6IHZvaWQge1xyXG5cdFx0dGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgdGhpcy5jdHguYXJjKHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55LCB0aGlzLnJhZGl1cywgMCwgTWF0aC5UQVUsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGwoKTtcclxuICAgIH1cclxuXHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
