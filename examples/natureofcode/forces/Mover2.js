var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
define(["require", "exports"], function (require, exports) {
    "use strict";
    var DisplayObject = etch.drawing.DisplayObject;
    var Point = etch.primitives.Point;
    var Vector = etch.primitives.Vector;
    var Mover2 = (function (_super) {
        __extends(Mover2, _super);
        function Mover2(mass, x, y) {
            _super.call(this);
            this.color = '#000';
            this.mass = mass;
            this.position = new Point(x, y);
            this.velocity = new Vector(0, 0);
            this.acceleration = new Vector(0, 0);
        }
        Mover2.prototype.init = function (drawTo, drawFrom) {
            _super.prototype.init.call(this, drawTo, drawFrom);
        };
        Mover2.prototype.applyForce = function (force) {
            this.acceleration.add(Vector.divN(force, this.mass));
        };
        Mover2.prototype.update = function () {
            var wind = this.drawTo.wind;
            this.applyForce(wind);
            var gravity = Vector.multN(this.drawTo.gravity, this.mass);
            this.applyForce(gravity);
            this.velocity.add(this.acceleration);
            this.position = this.position.toVector().add(this.velocity).toPoint();
            this.acceleration.mult(0);
            if (this.position.x > this.canvasWidth) {
                this.position.x = this.canvasWidth;
                this.velocity.x *= -1;
            }
            else if (this.position.x < 0) {
                this.velocity.x *= -1;
                this.position.x = 0;
            }
            if (this.position.y > this.canvasHeight) {
                this.velocity.y *= -1;
                this.position.y = this.canvasHeight;
            }
        };
        Mover2.prototype.draw = function () {
            this.ctx.beginPath();
            this.ctx.arc(this.position.x, this.position.y, this.mass * 20, 0, Math.TAU, false);
            this.ctx.fillStyle = this.color;
            this.ctx.fill();
        };
        return Mover2;
    }(DisplayObject));
    exports.Mover2 = Mover2;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdHVyZW9mY29kZS9mb3JjZXMvTW92ZXIyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7SUFDQSxJQUFPLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUNsRCxJQUFPLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztJQUNyQyxJQUFPLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUd2QztRQUE0QiwwQkFBYTtRQU94QyxnQkFBWSxJQUFZLEVBQUUsQ0FBUyxFQUFFLENBQVM7WUFDN0MsaUJBQU8sQ0FBQztZQUhGLFVBQUssR0FBVyxNQUFNLENBQUM7WUFJN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUVELHFCQUFJLEdBQUosVUFBSyxNQUF1QixFQUFFLFFBQTBCO1lBQ2pELGdCQUFLLENBQUMsSUFBSSxZQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNqQyxDQUFDO1FBRUosMkJBQVUsR0FBVixVQUFXLEtBQWE7WUFDcEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQztRQUVFLHVCQUFNLEdBQU47WUFFRixJQUFJLElBQUksR0FBaUMsSUFBSSxDQUFDLE1BQU8sQ0FBQyxJQUFJLENBQUM7WUFDM0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV0QixJQUFJLE9BQU8sR0FBVyxNQUFNLENBQUMsS0FBSyxDQUF1QixJQUFJLENBQUMsTUFBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUV6QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDdEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFN0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzVCLENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxQixDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQzFDLENBQUM7UUFDQyxDQUFDO1FBRUQscUJBQUksR0FBSjtZQUNGLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNuRixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEIsQ0FBQztRQUVMLGFBQUM7SUFBRCxDQXhEQSxBQXdEQyxDQXhEMkIsYUFBYSxHQXdEeEM7SUF4RFksY0FBTSxTQXdEbEIsQ0FBQSIsImZpbGUiOiJuYXR1cmVvZmNvZGUvZm9yY2VzL01vdmVyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDYW52YXMgPSBldGNoLmRyYXdpbmcuQ2FudmFzO1xyXG5pbXBvcnQgRGlzcGxheU9iamVjdCA9IGV0Y2guZHJhd2luZy5EaXNwbGF5T2JqZWN0O1xyXG5pbXBvcnQgUG9pbnQgPSBldGNoLnByaW1pdGl2ZXMuUG9pbnQ7XHJcbmltcG9ydCBWZWN0b3IgPSBldGNoLnByaW1pdGl2ZXMuVmVjdG9yO1xyXG5pbXBvcnQgR3Jhdml0eVNjYWxlZEJ5TWFzcyBmcm9tICcuL0dyYXZpdHlTY2FsZWRCeU1hc3MnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vdmVyMiBleHRlbmRzIERpc3BsYXlPYmplY3Qge1xyXG5cclxuXHRwdWJsaWMgdmVsb2NpdHk6IFZlY3RvcjtcclxuXHRwdWJsaWMgYWNjZWxlcmF0aW9uOiBWZWN0b3I7XHJcblx0cHVibGljIG1hc3M6IG51bWJlcjtcclxuXHRwdWJsaWMgY29sb3I6IHN0cmluZyA9ICcjMDAwJztcclxuXHJcblx0Y29uc3RydWN0b3IobWFzczogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlcil7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5tYXNzID0gbWFzcztcclxuXHRcdHRoaXMucG9zaXRpb24gPSBuZXcgUG9pbnQoeCwgeSk7XHJcbiAgICBcdHRoaXMudmVsb2NpdHkgPSBuZXcgVmVjdG9yKDAsIDApO1xyXG4gICAgXHR0aGlzLmFjY2VsZXJhdGlvbiA9IG5ldyBWZWN0b3IoMCwgMCk7XHJcblx0fVxyXG5cclxuXHRpbml0KGRyYXdUbzogSURpc3BsYXlDb250ZXh0LCBkcmF3RnJvbT86IElEaXNwbGF5Q29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLmluaXQoZHJhd1RvLCBkcmF3RnJvbSk7XHJcbiAgICB9XHJcblxyXG5cdGFwcGx5Rm9yY2UoZm9yY2U6IFZlY3Rvcik6IHZvaWQge1xyXG4gICAgXHR0aGlzLmFjY2VsZXJhdGlvbi5hZGQoVmVjdG9yLmRpdk4oZm9yY2UsIHRoaXMubWFzcykpO1xyXG5cdH1cclxuXHJcbiAgICB1cGRhdGUoKTogdm9pZHtcclxuXHJcblx0XHR2YXIgd2luZDogVmVjdG9yID0gKDxHcmF2aXR5U2NhbGVkQnlNYXNzPnRoaXMuZHJhd1RvKS53aW5kO1xyXG5cdFx0dGhpcy5hcHBseUZvcmNlKHdpbmQpO1xyXG5cclxuXHRcdHZhciBncmF2aXR5OiBWZWN0b3IgPSBWZWN0b3IubXVsdE4oKDxHcmF2aXR5U2NhbGVkQnlNYXNzPnRoaXMuZHJhd1RvKS5ncmF2aXR5LCB0aGlzLm1hc3MpO1xyXG5cdFx0dGhpcy5hcHBseUZvcmNlKGdyYXZpdHkpO1xyXG5cdFx0XHJcblx0XHR0aGlzLnZlbG9jaXR5LmFkZCh0aGlzLmFjY2VsZXJhdGlvbik7XHJcblx0ICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uLnRvVmVjdG9yKCkuYWRkKHRoaXMudmVsb2NpdHkpLnRvUG9pbnQoKTtcclxuXHQgICAgdGhpcy5hY2NlbGVyYXRpb24ubXVsdCgwKTtcclxuXHJcblx0XHRpZiAodGhpcy5wb3NpdGlvbi54ID4gdGhpcy5jYW52YXNXaWR0aCkge1xyXG5cdFx0XHR0aGlzLnBvc2l0aW9uLnggPSB0aGlzLmNhbnZhc1dpZHRoO1xyXG4gICAgICBcdFx0dGhpcy52ZWxvY2l0eS54ICo9IC0xO1xyXG5cdFx0fSBlbHNlIGlmICh0aGlzLnBvc2l0aW9uLnggPCAwKSB7XHJcblx0XHRcdHRoaXMudmVsb2NpdHkueCAqPSAtMTtcclxuICAgICAgXHRcdHRoaXMucG9zaXRpb24ueCA9IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMucG9zaXRpb24ueSA+IHRoaXMuY2FudmFzSGVpZ2h0KSB7XHJcblx0XHRcdHRoaXMudmVsb2NpdHkueSAqPSAtMTtcclxuICAgICAgXHRcdHRoaXMucG9zaXRpb24ueSA9IHRoaXMuY2FudmFzSGVpZ2h0O1xyXG5cdFx0fVxyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoKTogdm9pZCB7XHJcblx0XHR0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICB0aGlzLmN0eC5hcmModGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnksIHRoaXMubWFzcyAqIDIwLCAwLCBNYXRoLlRBVSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbCgpO1xyXG4gICAgfVxyXG5cclxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
